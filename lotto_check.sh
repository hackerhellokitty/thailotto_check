#!/bin/bash

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
center_echo() {
    local termwidth=$(tput cols)
    local text="$*"
    local textlength=${#text}
    if (( textlength >= termwidth )); then
        echo "$text"
    else
        local padding=$(( (termwidth - textlength) / 2 ))
        printf "%*s%s\n" $padding "" "$text"
    fi
}

while true; do
  clear
  center_echo "== üêæ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏´‡∏ß‡∏¢‡πÅ‡∏°‡∏ß‡∏î‡∏≥ üêà‚Äç‚¨õ =="
  center_echo " /\\_/\\ "
  center_echo "( o.o )"
  center_echo " > ^ < "
  echo
  echo "== üìÆ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏ß‡∏¢ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡πÅ‡∏°‡∏ß‡∏î‡∏≥ =="

  # ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏Ç‡∏™‡∏•‡∏≤‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 6 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  while true; do
    read -p "üî¢ ‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡∏•‡∏≤‡∏Å (6 ‡∏´‡∏•‡∏±‡∏Å): " number
    if [[ "$number" =~ ^[0-9]{6}$ ]]; then
      break
    else
      echo "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡∏•‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 6 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"
    fi
  done

  read -p "üìÖ ‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (‡πÄ‡∏ä‡πà‡∏ô 1 ‡∏´‡∏£‡∏∑‡∏≠ 16 ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ): " day
  read -p "üóìÔ∏è ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (1-12): " month
  read -p "üìÜ ‡∏õ‡∏µ ‡∏û.‡∏®. (‡πÄ‡∏ä‡πà‡∏ô 2567): " year

  # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏´‡∏•‡∏±‡∏Å
  day=$(printf "%02d" "$day")
  month=$(printf "%02d" "$month")
  year_ad=$((year - 543))

  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå cache
  cache_file="lotto_${year_ad}${month}${day}.json"

  echo
  echo "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•..."

  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  if [[ -f "$cache_file" ]]; then
    echo "üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå $cache_file"
    json=$(cat "$cache_file")
  else
    echo "üåê ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå $cache_file"
    json=$(curl -s -X POST -H "Content-Type: application/json" \
      -d "{\"date\":\"$day\",\"month\":\"$month\",\"year\":\"$year_ad\"}" \
      https://www.glo.or.th/api/checking/getLotteryResult)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    has_data=$(echo "$json" | jq -r '.response.result.data? != null')
    if [[ "$has_data" == "true" ]]; then
      echo "$json" > "$cache_file"
    else
      echo "üì≠ ‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å"
      # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      read -n 1 -s -r -p "‡∏Å‡∏î Y ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏ß‡∏¢‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å..." key
      echo
      key_lower=$(echo "$key" | tr '[:upper:]' '[:lower:]')
      [[ "$key_lower" == "y" ]] || break
      continue
    fi
  fi

  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
  prize_name_th() {
    case "$1" in
      first) echo "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1" ;;
      second) echo "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2" ;;
      third) echo "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3" ;;
      fourth) echo "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4" ;;
      fifth) echo "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5" ;;
      *) echo "$1" ;;
    esac
  }

  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏•‡∏±‡∏Å
  check_prize() {
    local prize_name="$1"
    local numbers=$(echo "$json" | jq -r ".response.result.data.${prize_name}.number[].value")
    local prize_th=$(prize_name_th "$prize_name")
    for n in $numbers; do
      if [[ "$n" == "$number" ]]; then
        if [[ "$prize_name" == "first" ]]; then
          echo "üéä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡∏Å‡∏≠‡∏á‡∏™‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!"
        else
          echo "üéâ ‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: $prize_th"
        fi
      fi
    done
  }

  check_prize "first"
  check_prize "second"
  check_prize "third"
  check_prize "fourth"
  check_prize "fifth"

  # ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß
  for n in $(echo "$json" | jq -r '.response.result.data.last3f.number[].value'); do
    if [[ "${number:0:3}" == "$n" ]]; then
      echo "üéâ ‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß ($n) 	4,000 ‡∏ö‡∏≤‡∏ó"
    fi
  done

  # ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
  for n in $(echo "$json" | jq -r '.response.result.data.last3b.number[].value'); do
    if [[ "${number:3:3}" == "$n" ]]; then
      echo "üéâ ‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß ($n) 	4,000 ‡∏ö‡∏≤‡∏ó"
    fi
  done

  # ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
  for n in $(echo "$json" | jq -r '.response.result.data.last2.number[].value'); do
    if [[ "${number:4:2}" == "$n" ]]; then
      echo "üéâ ‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß ($n)  2,000 ‡∏ö‡∏≤‡∏ó"
    fi
  done

  # ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
  for n in $(echo "$json" | jq -r '.response.result.data.near1.number[].value'); do
    if [[ "$n" == "$number" ]]; then
      echo "üéâ ‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 100,000 ‡∏ö‡∏≤‡∏ó"
    fi
  done

  # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  match=$(echo "$json" | jq -r --arg num "$number" --arg first3 "${number:0:3}" --arg last3 "${number:3:3}" --arg last2 "${number:4:2}" '
    .response.result.data |
    .. | .? // empty |
    select(
      (.value? == $num) or
      (.value? == $first3) or
      (.value? == $last3) or
      (.value? == $last2)
    )
  ')
  if [[ -z "$match" ]]; then
    echo "üí∏ ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢... ‡πÇ‡∏î‡∏ô‡∏´‡∏ß‡∏¢‡πÅ‡∏î‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏á‡∏ß‡∏î‡∏´‡∏ô‡πâ‡∏≤"
  fi

  echo
  read -n 1 -s -r -p "‡∏Å‡∏î Y ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏ß‡∏¢‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å..." key
  echo
  key_lower=$(echo "$key" | tr '[:upper:]' '[:lower:]')
  [[ "$key_lower" == "y" ]] || break
done